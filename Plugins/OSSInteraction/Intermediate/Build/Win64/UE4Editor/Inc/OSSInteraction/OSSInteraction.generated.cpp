// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "OSSInteractionPrivatePCH.h"
#include "OSSInteraction.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1OSSInteraction() {}
FName OSSINTERACTION_DoLookAt = FName(TEXT("DoLookAt"));
FName OSSINTERACTION_InitNeckReferenceTransform = FName(TEXT("InitNeckReferenceTransform"));
FName OSSINTERACTION_IsEyeTrackingEnabled = FName(TEXT("IsEyeTrackingEnabled"));
FName OSSINTERACTION_IsNeckTrackingEnabled = FName(TEXT("IsNeckTrackingEnabled"));
static class UEnum* EInteractiveTrackingState_StaticEnum()
{
	extern OSSINTERACTION_API class UPackage* Z_Construct_UPackage__Script_OSSInteraction();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern OSSINTERACTION_API class UEnum* Z_Construct_UEnum_OSSInteraction_EInteractiveTrackingState();
		Singleton = GetStaticEnum(Z_Construct_UEnum_OSSInteraction_EInteractiveTrackingState, Z_Construct_UPackage__Script_OSSInteraction(), TEXT("EInteractiveTrackingState"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EInteractiveTrackingState(EInteractiveTrackingState_StaticEnum, TEXT("/Script/OSSInteraction"), TEXT("EInteractiveTrackingState"), false, nullptr, nullptr);
static class UEnum* EEyeDartState_StaticEnum()
{
	extern OSSINTERACTION_API class UPackage* Z_Construct_UPackage__Script_OSSInteraction();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern OSSINTERACTION_API class UEnum* Z_Construct_UEnum_OSSInteraction_EEyeDartState();
		Singleton = GetStaticEnum(Z_Construct_UEnum_OSSInteraction_EEyeDartState, Z_Construct_UPackage__Script_OSSInteraction(), TEXT("EEyeDartState"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EEyeDartState(EEyeDartState_StaticEnum, TEXT("/Script/OSSInteraction"), TEXT("EEyeDartState"), false, nullptr, nullptr);
	void UOSSInteractiveAgentComponent::DoLookAt(float Pitch, float Yaw)
	{
		OSSInteractiveAgentComponent_eventDoLookAt_Parms Parms;
		Parms.Pitch=Pitch;
		Parms.Yaw=Yaw;
		ProcessEvent(FindFunctionChecked(OSSINTERACTION_DoLookAt),&Parms);
	}
	FTransform UOSSInteractiveAgentComponent::InitNeckReferenceTransform()
	{
		OSSInteractiveAgentComponent_eventInitNeckReferenceTransform_Parms Parms;
		ProcessEvent(FindFunctionChecked(OSSINTERACTION_InitNeckReferenceTransform),&Parms);
		return Parms.ReturnValue;
	}
	bool UOSSInteractiveAgentComponent::IsEyeTrackingEnabled()
	{
		OSSInteractiveAgentComponent_eventIsEyeTrackingEnabled_Parms Parms;
		ProcessEvent(FindFunctionChecked(OSSINTERACTION_IsEyeTrackingEnabled),&Parms);
		return !!Parms.ReturnValue;
	}
	bool UOSSInteractiveAgentComponent::IsNeckTrackingEnabled()
	{
		OSSInteractiveAgentComponent_eventIsNeckTrackingEnabled_Parms Parms;
		ProcessEvent(FindFunctionChecked(OSSINTERACTION_IsNeckTrackingEnabled),&Parms);
		return !!Parms.ReturnValue;
	}
	void UOSSInteractiveAgentComponent::StaticRegisterNativesUOSSInteractiveAgentComponent()
	{
	}
	IMPLEMENT_CLASS(UOSSInteractiveAgentComponent, 54486422);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UCurveFloat_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();

	OSSINTERACTION_API class UEnum* Z_Construct_UEnum_OSSInteraction_EInteractiveTrackingState();
	OSSINTERACTION_API class UEnum* Z_Construct_UEnum_OSSInteraction_EEyeDartState();
	OSSINTERACTION_API class UFunction* Z_Construct_UFunction_UOSSInteractiveAgentComponent_DoLookAt();
	OSSINTERACTION_API class UFunction* Z_Construct_UFunction_UOSSInteractiveAgentComponent_InitNeckReferenceTransform();
	OSSINTERACTION_API class UFunction* Z_Construct_UFunction_UOSSInteractiveAgentComponent_IsEyeTrackingEnabled();
	OSSINTERACTION_API class UFunction* Z_Construct_UFunction_UOSSInteractiveAgentComponent_IsNeckTrackingEnabled();
	OSSINTERACTION_API class UClass* Z_Construct_UClass_UOSSInteractiveAgentComponent_NoRegister();
	OSSINTERACTION_API class UClass* Z_Construct_UClass_UOSSInteractiveAgentComponent();
	OSSINTERACTION_API class UPackage* Z_Construct_UPackage__Script_OSSInteraction();
	UEnum* Z_Construct_UEnum_OSSInteraction_EInteractiveTrackingState()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_OSSInteraction();
		extern uint32 Get_Z_Construct_UEnum_OSSInteraction_EInteractiveTrackingState_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EInteractiveTrackingState"), 0, Get_Z_Construct_UEnum_OSSInteraction_EInteractiveTrackingState_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EInteractiveTrackingState"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EITS_Inactive")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EITS_EaseIn")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EITS_Active")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EITS_EaseOut")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EITS_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EInteractiveTrackingState");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_OSSInteraction_EInteractiveTrackingState_CRC() { return 1815087380U; }
	UEnum* Z_Construct_UEnum_OSSInteraction_EEyeDartState()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_OSSInteraction();
		extern uint32 Get_Z_Construct_UEnum_OSSInteraction_EEyeDartState_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EEyeDartState"), 0, Get_Z_Construct_UEnum_OSSInteraction_EEyeDartState_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EEyeDartState"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDS_LookingAtTarget")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDS_LookingAway")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDS_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EEyeDartState");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_OSSInteraction_EEyeDartState_CRC() { return 752964149U; }
	UFunction* Z_Construct_UFunction_UOSSInteractiveAgentComponent_DoLookAt()
	{
		UObject* Outer=Z_Construct_UClass_UOSSInteractiveAgentComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DoLookAt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(OSSInteractiveAgentComponent_eventDoLookAt_Parms));
			UProperty* NewProp_Yaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Yaw"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Yaw, OSSInteractiveAgentComponent_eventDoLookAt_Parms), 0x0010000000000080);
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pitch"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Pitch, OSSInteractiveAgentComponent_eventDoLookAt_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Overridable check to see if eye tracking should be active"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UOSSInteractiveAgentComponent_InitNeckReferenceTransform()
	{
		UObject* Outer=Z_Construct_UClass_UOSSInteractiveAgentComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InitNeckReferenceTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08820800, 65535, sizeof(OSSInteractiveAgentComponent_eventInitNeckReferenceTransform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, OSSInteractiveAgentComponent_eventInitNeckReferenceTransform_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Overridable check to see if eye tracking should be active"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UOSSInteractiveAgentComponent_IsEyeTrackingEnabled()
	{
		UObject* Outer=Z_Construct_UClass_UOSSInteractiveAgentComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsEyeTrackingEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(OSSInteractiveAgentComponent_eventIsEyeTrackingEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, OSSInteractiveAgentComponent_eventIsEyeTrackingEnabled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, OSSInteractiveAgentComponent_eventIsEyeTrackingEnabled_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, OSSInteractiveAgentComponent_eventIsEyeTrackingEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Overridable check to see if eye tracking should be active"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UOSSInteractiveAgentComponent_IsNeckTrackingEnabled()
	{
		UObject* Outer=Z_Construct_UClass_UOSSInteractiveAgentComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsNeckTrackingEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(OSSInteractiveAgentComponent_eventIsNeckTrackingEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, OSSInteractiveAgentComponent_eventIsNeckTrackingEnabled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, OSSInteractiveAgentComponent_eventIsNeckTrackingEnabled_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, OSSInteractiveAgentComponent_eventIsNeckTrackingEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Interface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Overridable check to see if eye tracking should be active"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UOSSInteractiveAgentComponent_NoRegister()
	{
		return UOSSInteractiveAgentComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UOSSInteractiveAgentComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_OSSInteraction();
			OuterClass = UOSSInteractiveAgentComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00081;

				OuterClass->LinkChild(Z_Construct_UFunction_UOSSInteractiveAgentComponent_DoLookAt());
				OuterClass->LinkChild(Z_Construct_UFunction_UOSSInteractiveAgentComponent_InitNeckReferenceTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UOSSInteractiveAgentComponent_IsEyeTrackingEnabled());
				OuterClass->LinkChild(Z_Construct_UFunction_UOSSInteractiveAgentComponent_IsNeckTrackingEnabled());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LagCurveEaseOut = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LagCurveEaseOut"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(LagCurveEaseOut, UOSSInteractiveAgentComponent), 0x0010000000000001, Z_Construct_UClass_UCurveFloat_NoRegister());
				UProperty* NewProp_LagCurveEaseIn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LagCurveEaseIn"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(LagCurveEaseIn, UOSSInteractiveAgentComponent), 0x0010000000000001, Z_Construct_UClass_UCurveFloat_NoRegister());
				UProperty* NewProp_PlayerLagAngleBounds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayerLagAngleBounds"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PlayerLagAngleBounds, UOSSInteractiveAgentComponent), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_PlayerLagCloseEnoughDeg = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayerLagCloseEnoughDeg"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PlayerLagCloseEnoughDeg, UOSSInteractiveAgentComponent), 0x0010000000000001);
				UProperty* NewProp_PlayerLagMaxDegPerSec = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayerLagMaxDegPerSec"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PlayerLagMaxDegPerSec, UOSSInteractiveAgentComponent), 0x0010000000000001);
				UProperty* NewProp_PlayerLagPosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayerLagPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PlayerLagPosition, UOSSInteractiveAgentComponent), 0x0010000000000014, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_NeckEaseTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NeckEaseTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NeckEaseTime, UOSSInteractiveAgentComponent), 0x0010000000000001);
				UProperty* NewProp_EyeDartMovementRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EyeDartMovementRange"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EyeDartMovementRange, UOSSInteractiveAgentComponent), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_EyeDartFrequencyRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EyeDartFrequencyRange"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EyeDartFrequencyRange, UOSSInteractiveAgentComponent), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_EyeYawConstraints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EyeYawConstraints"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EyeYawConstraints, UOSSInteractiveAgentComponent), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_EyePitchConstraints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EyePitchConstraints"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EyePitchConstraints, UOSSInteractiveAgentComponent), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_EyeSeparationModifier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EyeSeparationModifier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(EyeSeparationModifier, UOSSInteractiveAgentComponent), 0x0010000000000001);
				UProperty* NewProp_EyeEaseTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EyeEaseTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(EyeEaseTime, UOSSInteractiveAgentComponent), 0x0010000000000001);
				UProperty* NewProp_EyeAimBoneRight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EyeAimBoneRight"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(EyeAimBoneRight, UOSSInteractiveAgentComponent), 0x0010000000000001);
				UProperty* NewProp_EyeAimBoneLeft = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EyeAimBoneLeft"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(EyeAimBoneLeft, UOSSInteractiveAgentComponent), 0x0010000000000001);
				UProperty* NewProp_EyeReferenceSocketRight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EyeReferenceSocketRight"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(EyeReferenceSocketRight, UOSSInteractiveAgentComponent), 0x0010000000000001);
				UProperty* NewProp_EyeReferenceSocketLeft = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EyeReferenceSocketLeft"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(EyeReferenceSocketLeft, UOSSInteractiveAgentComponent), 0x0010000000000001);
				UProperty* NewProp_AimSocket = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AimSocket"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(AimSocket, UOSSInteractiveAgentComponent), 0x0010000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsEnabled, UOSSInteractiveAgentComponent, bool);
				UProperty* NewProp_IsEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsEnabled, UOSSInteractiveAgentComponent), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(IsEnabled, UOSSInteractiveAgentComponent), sizeof(bool), true);
				UProperty* NewProp_SkelMeshComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SkelMeshComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SkelMeshComponent, UOSSInteractiveAgentComponent), 0x001000000008201c, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UOSSInteractiveAgentComponent_DoLookAt(), "DoLookAt"); // 821675705
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UOSSInteractiveAgentComponent_InitNeckReferenceTransform(), "InitNeckReferenceTransform"); // 1516582014
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UOSSInteractiveAgentComponent_IsEyeTrackingEnabled(), "IsEyeTrackingEnabled"); // 1848867714
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UOSSInteractiveAgentComponent_IsNeckTrackingEnabled(), "IsNeckTrackingEnabled"); // 20041535
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("OSS"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_LagCurveEaseOut, TEXT("Category"), TEXT("PlayerLag"));
				MetaData->SetValue(NewProp_LagCurveEaseOut, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_LagCurveEaseOut, TEXT("ToolTip"), TEXT("lag movement ease-out curve"));
				MetaData->SetValue(NewProp_LagCurveEaseIn, TEXT("Category"), TEXT("PlayerLag"));
				MetaData->SetValue(NewProp_LagCurveEaseIn, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_LagCurveEaseIn, TEXT("ToolTip"), TEXT("lag movement ease-in curve"));
				MetaData->SetValue(NewProp_PlayerLagAngleBounds, TEXT("Category"), TEXT("PlayerLag"));
				MetaData->SetValue(NewProp_PlayerLagAngleBounds, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_PlayerLagAngleBounds, TEXT("ToolTip"), TEXT("PlayerLagPosition won't get updated if the actual Player position is less than PlayerAngleLagBounds.X degrees away. The PlayerAngleLagBounds.Y determines basically that we should move as fast as possible (PlayerLagMaxDegPerSec)"));
				MetaData->SetValue(NewProp_PlayerLagCloseEnoughDeg, TEXT("Category"), TEXT("PlayerLag"));
				MetaData->SetValue(NewProp_PlayerLagCloseEnoughDeg, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_PlayerLagCloseEnoughDeg, TEXT("ToolTip"), TEXT("Threshols (in degrees) that is considered close enough to the PlayerLagPosition being in the same place as the actual position"));
				MetaData->SetValue(NewProp_PlayerLagMaxDegPerSec, TEXT("Category"), TEXT("PlayerLag"));
				MetaData->SetValue(NewProp_PlayerLagMaxDegPerSec, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_PlayerLagMaxDegPerSec, TEXT("ToolTip"), TEXT("Maximum rotation we can apply to update the PlayerLagPosition per frame"));
				MetaData->SetValue(NewProp_PlayerLagPosition, TEXT("Category"), TEXT("PlayerLag"));
				MetaData->SetValue(NewProp_PlayerLagPosition, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_PlayerLagPosition, TEXT("ToolTip"), TEXT("Where does the Blueprint currently think the player is"));
				MetaData->SetValue(NewProp_NeckEaseTime, TEXT("Category"), TEXT("NeckTracking"));
				MetaData->SetValue(NewProp_NeckEaseTime, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_NeckEaseTime, TEXT("ToolTip"), TEXT("Seconds to ease in neck tracking"));
				MetaData->SetValue(NewProp_EyeDartMovementRange, TEXT("Category"), TEXT("EyeDarts"));
				MetaData->SetValue(NewProp_EyeDartMovementRange, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_EyeDartMovementRange, TEXT("ToolTip"), TEXT("random range in degrees for eye darts"));
				MetaData->SetValue(NewProp_EyeDartFrequencyRange, TEXT("Category"), TEXT("EyeDarts"));
				MetaData->SetValue(NewProp_EyeDartFrequencyRange, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_EyeDartFrequencyRange, TEXT("ToolTip"), TEXT("bounds of random time (in seconds) between procedural eye darts"));
				MetaData->SetValue(NewProp_EyeYawConstraints, TEXT("Category"), TEXT("EyeTracking"));
				MetaData->SetValue(NewProp_EyeYawConstraints, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_EyeYawConstraints, TEXT("ToolTip"), TEXT("Constraints (in degrees) of eye yaw (relative to reference sockets"));
				MetaData->SetValue(NewProp_EyePitchConstraints, TEXT("Category"), TEXT("EyeTracking"));
				MetaData->SetValue(NewProp_EyePitchConstraints, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_EyePitchConstraints, TEXT("ToolTip"), TEXT("Constraints (in degrees) of eye pitch (relative to reference sockets"));
				MetaData->SetValue(NewProp_EyeSeparationModifier, TEXT("Category"), TEXT("EyeTracking"));
				MetaData->SetValue(NewProp_EyeSeparationModifier, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_EyeSeparationModifier, TEXT("ToolTip"), TEXT("Amount of extra separation (in degrees) for the eyes"));
				MetaData->SetValue(NewProp_EyeEaseTime, TEXT("Category"), TEXT("EyeTracking"));
				MetaData->SetValue(NewProp_EyeEaseTime, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_EyeEaseTime, TEXT("ToolTip"), TEXT("Seconds to ease in eye tracking"));
				MetaData->SetValue(NewProp_EyeAimBoneRight, TEXT("Category"), TEXT("EyeTracking"));
				MetaData->SetValue(NewProp_EyeAimBoneRight, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_EyeAimBoneRight, TEXT("ToolTip"), TEXT("actual bone that this component will adjust to aim the eyes (RIGHT)"));
				MetaData->SetValue(NewProp_EyeAimBoneLeft, TEXT("Category"), TEXT("EyeTracking"));
				MetaData->SetValue(NewProp_EyeAimBoneLeft, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_EyeAimBoneLeft, TEXT("ToolTip"), TEXT("actual bone that this component will adjust to aim the eyes (LEFT)"));
				MetaData->SetValue(NewProp_EyeReferenceSocketRight, TEXT("Category"), TEXT("EyeTracking"));
				MetaData->SetValue(NewProp_EyeReferenceSocketRight, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_EyeReferenceSocketRight, TEXT("ToolTip"), TEXT("Socket that we use for reference for eye aiming. It must not be affected by moving the EyeAimBone (RIGHT)"));
				MetaData->SetValue(NewProp_EyeReferenceSocketLeft, TEXT("Category"), TEXT("EyeTracking"));
				MetaData->SetValue(NewProp_EyeReferenceSocketLeft, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_EyeReferenceSocketLeft, TEXT("ToolTip"), TEXT("Socket that we use for reference for eye aiming. It must not be affected by moving the EyeAimBone (LEFT)"));
				MetaData->SetValue(NewProp_AimSocket, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_AimSocket, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_AimSocket, TEXT("ToolTip"), TEXT("Socket that we use for reference for aiming"));
				MetaData->SetValue(NewProp_IsEnabled, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_IsEnabled, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_IsEnabled, TEXT("ToolTip"), TEXT("Is this componend enabled"));
				MetaData->SetValue(NewProp_SkelMeshComponent, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_SkelMeshComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SkelMeshComponent, TEXT("ModuleRelativePath"), TEXT("Public/OSSInteractiveAgentComponent.h"));
				MetaData->SetValue(NewProp_SkelMeshComponent, TEXT("ToolTip"), TEXT("GENERAL"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UOSSInteractiveAgentComponent(Z_Construct_UClass_UOSSInteractiveAgentComponent, &UOSSInteractiveAgentComponent::StaticClass, TEXT("UOSSInteractiveAgentComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UOSSInteractiveAgentComponent);
	UPackage* Z_Construct_UPackage__Script_OSSInteraction()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/OSSInteraction")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x9A150DEC;
			Guid.B = 0x4705D71A;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
