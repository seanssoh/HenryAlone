// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "OSSUtilitiesPrivatePCH.h"
#include "OSSUtilities.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1OSSUtilities() {}
	void UOSSUtilitiesKismetLibrary::StaticRegisterNativesUOSSUtilitiesKismetLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UOSSUtilitiesKismetLibrary::StaticClass(), "GetWorldOrientationAndPosition",(Native)&UOSSUtilitiesKismetLibrary::execGetWorldOrientationAndPosition);
		FNativeFunctionRegistrar::RegisterFunction(UOSSUtilitiesKismetLibrary::StaticClass(), "RaySphereIntersection",(Native)&UOSSUtilitiesKismetLibrary::execRaySphereIntersection);
	}
	IMPLEMENT_CLASS(UOSSUtilitiesKismetLibrary, 360125907);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();

	OSSUTILITIES_API class UFunction* Z_Construct_UFunction_UOSSUtilitiesKismetLibrary_GetWorldOrientationAndPosition();
	OSSUTILITIES_API class UFunction* Z_Construct_UFunction_UOSSUtilitiesKismetLibrary_RaySphereIntersection();
	OSSUTILITIES_API class UClass* Z_Construct_UClass_UOSSUtilitiesKismetLibrary_NoRegister();
	OSSUTILITIES_API class UClass* Z_Construct_UClass_UOSSUtilitiesKismetLibrary();
	OSSUTILITIES_API class UPackage* Z_Construct_UPackage__Script_OSSUtilities();
	UFunction* Z_Construct_UFunction_UOSSUtilitiesKismetLibrary_GetWorldOrientationAndPosition()
	{
		struct OSSUtilitiesKismetLibrary_eventGetWorldOrientationAndPosition_Parms
		{
			UObject* WorldContextObject;
			FRotator DeviceRotation;
			FVector DevicePosition;
		};
		UObject* Outer=Z_Construct_UClass_UOSSUtilitiesKismetLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetWorldOrientationAndPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(OSSUtilitiesKismetLibrary_eventGetWorldOrientationAndPosition_Parms));
			UProperty* NewProp_DevicePosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DevicePosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DevicePosition, OSSUtilitiesKismetLibrary_eventGetWorldOrientationAndPosition_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_DeviceRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeviceRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DeviceRotation, OSSUtilitiesKismetLibrary_eventGetWorldOrientationAndPosition_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, OSSUtilitiesKismetLibrary_eventGetWorldOrientationAndPosition_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input|HeadMountedDisplay"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/OSSUtilitiesKismetLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Grabs the current orientation and position for the HMD and converts them to WorldSpace.\n\n@param DeviceRotation (out) The device's current rotation\n@param DevicePosition (out) The device's current position, in its own tracking space"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UOSSUtilitiesKismetLibrary_RaySphereIntersection()
	{
		struct OSSUtilitiesKismetLibrary_eventRaySphereIntersection_Parms
		{
			FVector RayOrigin;
			FVector RayDirection;
			FVector SphereOrigin;
			float SphereRadius;
			FVector IntersectionA;
			FVector IntersectionB;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UOSSUtilitiesKismetLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RaySphereIntersection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(OSSUtilitiesKismetLibrary_eventRaySphereIntersection_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, OSSUtilitiesKismetLibrary_eventRaySphereIntersection_Parms), 0x0010000000000580);
			UProperty* NewProp_IntersectionB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntersectionB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(IntersectionB, OSSUtilitiesKismetLibrary_eventRaySphereIntersection_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_IntersectionA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IntersectionA"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(IntersectionA, OSSUtilitiesKismetLibrary_eventRaySphereIntersection_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SphereRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SphereRadius, OSSUtilitiesKismetLibrary_eventRaySphereIntersection_Parms), 0x0010000000000080);
			UProperty* NewProp_SphereOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SphereOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SphereOrigin, OSSUtilitiesKismetLibrary_eventRaySphereIntersection_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_RayDirection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RayDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RayDirection, OSSUtilitiesKismetLibrary_eventRaySphereIntersection_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_RayOrigin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RayOrigin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RayOrigin, OSSUtilitiesKismetLibrary_eventRaySphereIntersection_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("OSS|Utilities"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/OSSUtilitiesKismetLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return: the number of intersection points [0,1,2]"));
			MetaData->SetValue(NewProp_SphereOrigin, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_RayDirection, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_RayOrigin, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UOSSUtilitiesKismetLibrary_NoRegister()
	{
		return UOSSUtilitiesKismetLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UOSSUtilitiesKismetLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_OSSUtilities();
			OuterClass = UOSSUtilitiesKismetLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UOSSUtilitiesKismetLibrary_GetWorldOrientationAndPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UOSSUtilitiesKismetLibrary_RaySphereIntersection());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UOSSUtilitiesKismetLibrary_GetWorldOrientationAndPosition(), "GetWorldOrientationAndPosition"); // 3988814348
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UOSSUtilitiesKismetLibrary_RaySphereIntersection(), "RaySphereIntersection"); // 4062045549
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("OSSUtilitiesKismetLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/OSSUtilitiesKismetLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UOSSUtilitiesKismetLibrary(Z_Construct_UClass_UOSSUtilitiesKismetLibrary, &UOSSUtilitiesKismetLibrary::StaticClass, TEXT("UOSSUtilitiesKismetLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UOSSUtilitiesKismetLibrary);
	UPackage* Z_Construct_UPackage__Script_OSSUtilities()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/OSSUtilities")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x8131B574;
			Guid.B = 0x49D34508;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
